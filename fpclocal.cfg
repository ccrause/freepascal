# For a release compile with optimizes and strip debuginfo
#IFDEF RELEASE
  -O2
  -Xs
  #WRITE Compiling Release Version
#ENDIF

# For a debug version compile with debuginfo and all codegeneration checks on
#IFDEF DEBUG
  -gl
  -Crtoi
  #WRITE Compiling Debug Version
#ELSE
  # Strip debuginfo from the executable if not in debug mode
  -Xs
#ENDIF

# assembling
#ifdef darwin
# use pipes instead of temporary files for assembling
-ap
# path to Xcode 4.3+ utilities (no problem if it doesn't exist)
-FD/Applications/Xcode.app/Contents/Developer/usr/bin
#endif

# ----------------
# Parsing switches
# ----------------

# Allow goto, inline, C-operators, C-vars
-Sgic

#ifdef darwin
#ifdef cpui386
-Cppentiumm
-Oppentiumm
#endif
#endif

# search path for unicode binary files (FPC 2.x does not know this switch)
#ifndef VER2
-FM/unicode/
#endif

# Search for $fpctarget/$fpcsubarch-$fpcmemorymodel/ subdirectory first
# for i8086 CPU
#ifdef cpui8086
-Fu~/fpc/avr/rtl/units/$fpctarget/$fpcsubarch-$fpcmemorymodel
-Fu~/fpc/avrfpcversion/packages/*/units/$fpctarget/$fpcsubarch-$fpcmemorymodel/*
-Fu/units/$fpctarget/$fpcsubarch-$fpcmemorymodel/rtl
#endif

# searchpath for units and other system dependent things
#ifdef cpuavr
-Fu~/fpc/avr/rtl/units/$fpctarget-$fpcsubarch
-Fu~/fpc/avr/packages/*/units/$fpctarget-$fpcsubarch/*
#else
-Fu~/fpc/avr/rtl/units/$fpctarget
-Fu~/fpc/avr/packages/*/units/$fpctarget/*
#endif

#IFDEF FPCAPACHE_1_3
-Fu~/fpc/$fpcversion/packages/httpd13/units/$fpctarget
#ELSE
#IFDEF FPCAPACHE_2_0
-Fu~/fpc/$fpcversion/packages/httpd20/units/$fpctarget
#ELSE
-Fu~/fpc/$fpcversion/packages/httpd24/units/$fpctarget
#ENDIF
#ENDIF

# searchpath for fppkg user-specific packages
-Fu~/.fppkg/lib/fpc/$fpcversion/units/$FPCTARGET/*

# path to the gcclib
#ifdef cpui386
-Fl/usr/lib/gcc/x86_64-linux-gnu/7/32
#endif
#ifdef cpux86_64
-Fl/usr/lib/gcc/x86_64-linux-gnu/7
#endif

# searchpath for libraries
#-Fl/lib
#-Fl/lib;/usr/lib
-Fl/lib/$FPCTARGET

# searchpath for tools
-FD~/fpc/installs/bin

#IFNDEF CPUI386
#IFNDEF CPUAMD64
#DEFINE NEEDCROSSBINUTILS
#ENDIF
#ENDIF

#IFNDEF Linux
#DEFINE NEEDCROSSBINUTILS
#ENDIF

# never need cross-prefix when targeting the JVM
# (no native compiler, always cross-compiling)
#ifdef cpujvm
#undef NEEDCROSSBINUTILS
#endif

# for android cross-prefix is set by compiler
#ifdef android
#undef NEEDCROSSBINUTILS
#endif

# never need cross-prefix when targeting the i8086
# (no native compiler, always cross-compiling)
#ifdef cpui8086
#undef NEEDCROSSBINUTILS
#endif

# never need cross-prefix when targeting the i8086
# (no native compiler, always cross-compiling)
#ifdef cpujvm
#undef NEEDCROSSBINUTILS
#endif

# binutils prefix for cross compiling
#IFDEF FPC_CROSSCOMPILING
#IFDEF CPUAVR
  -XPavr-
#ELSE
  -XP$FPCTARGET-
#ENDIF
#ENDIF


# Always use smartlinking on i8086, because the system unit exceeds the 64kb
# code limit
#ifdef cpui8086
-CX
-XX
#endif


# -------------
# Miscellaneous
# -------------

# Write always a nice FPC logo ;)
-l

# Display Info, Warnings and Notes
-viwn
# If you don't want so much verbosity use
#-vw
